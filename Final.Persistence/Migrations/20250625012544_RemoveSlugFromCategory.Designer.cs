// <auto-generated />
using System;
using Final.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Final.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250625012544_RemoveSlugFromCategory")]
    partial class RemoveSlugFromCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Final.Domain.Entities.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "NVIDIA"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Corsair"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Kingston"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Western Digital"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "G.Skill"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Crucial"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Seasonic"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Cooler Master"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "MSI"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "CPU"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "GPU"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "RAM"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "SSD"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "PSU"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Final.Domain.Entities.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Vi xử lý đầu bảng cho gaming và sáng tạo nội dung, 24 nhân 32 luồng, tốc độ tối đa 6.0 GHz.",
                            ImagesJson = "[\"https://placehold.co/600x600/EFEFEF/333?text=i9-14900K\"]",
                            Name = "Intel Core i9-14900K",
                            Price = 15500000m,
                            Sku = "CPU-INT-14900K",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Lựa chọn tuyệt vời cho gaming hiệu năng cao, 20 nhân 28 luồng.",
                            ImagesJson = "[\"https://placehold.co/600x600/EFEFEF/333?text=i7-14700K\"]",
                            Name = "Intel Core i7-14700K",
                            Price = 11200000m,
                            Sku = "CPU-INT-14700K",
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = 3L,
                            BrandId = 2L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Vua gaming với công nghệ 3D V-Cache, 16 nhân 32 luồng.",
                            ImagesJson = "[\"https://placehold.co/600x600/EFEFEF/333?text=R9-7950X3D\"]",
                            Name = "AMD Ryzen 9 7950X3D",
                            Price = 14800000m,
                            Sku = "CPU-AMD-7950X3D",
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = 4L,
                            BrandId = 2L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Hiệu năng gaming thuần túy tốt nhất phân khúc nhờ 3D V-Cache, 8 nhân 16 luồng.",
                            ImagesJson = "[\"https://placehold.co/600x600/EFEFEF/333?text=R7-7800X3D\"]",
                            Name = "AMD Ryzen 7 7800X3D",
                            Price = 9800000m,
                            Sku = "CPU-AMD-7800X3D",
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = 5L,
                            BrandId = 3L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sức mạnh tối thượng cho gaming 4K và các tác vụ AI, Ray Tracing đỉnh cao.",
                            ImagesJson = "[\"https://placehold.co/600x600/1B3C34/FFF?text=RTX+4090\", \"https://placehold.co/600x600/CCC/333?text=RTX+4090+Side\"]",
                            Name = "NVIDIA GeForce RTX 4090",
                            Price = 45000000m,
                            Sku = "GPU-NV-4090",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 6L,
                            BrandId = 3L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Hiệu năng vượt trội cho gaming 1440p và 4K, phiên bản nâng cấp của RTX 4080.",
                            ImagesJson = "[\"https://placehold.co/600x600/1B3C34/FFF?text=RTX+4080S\"]",
                            Name = "NVIDIA GeForce RTX 4080 Super",
                            Price = 31000000m,
                            Sku = "GPU-NV-4080S",
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 7L,
                            BrandId = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Card đồ họa đầu bảng của AMD, đối thủ cạnh tranh trực tiếp với RTX 4080.",
                            ImagesJson = "[\"https://placehold.co/600x600/BF0A30/FFF?text=RX+7900XTX\"]",
                            Name = "AMD Radeon RX 7900 XTX",
                            Price = 28500000m,
                            Sku = "GPU-AMD-7900XTX",
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = 8L,
                            BrandId = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Lựa chọn p/p tốt nhất cho gaming 1440p.",
                            ImagesJson = "[\"https://placehold.co/600x600/BF0A30/FFF?text=RX+7800XT\"]",
                            Name = "AMD Radeon RX 7800 XT",
                            Price = 15000000m,
                            Sku = "GPU-AMD-7800XT",
                            StockQuantity = 90
                        },
                        new
                        {
                            Id = 9L,
                            BrandId = 4L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kit RAM DDR5 hiệu năng cao, tản nhiệt nhôm, tương thích tốt với Intel XMP và AMD EXPO.",
                            ImagesJson = "[\"https://placehold.co/600x600/EFEFEF/333?text=Vengeance+DDR5\"]",
                            Name = "Corsair Vengeance DDR5 32GB (2x16GB) 6000MHz",
                            Price = 3200000m,
                            Sku = "RAM-COR-V32GB",
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = 10L,
                            BrandId = 8L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2024, 2, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Thiết kế đẹp mắt với LED RGB, tốc độ bus cao dành cho người dùng chuyên nghiệp và game thủ.",
                            ImagesJson = "[\"https://placehold.co/600x600/EFEFEF/333?text=Trident+Z5\"]",
                            Name = "G.Skill Trident Z5 RGB DDR5 32GB (2x16GB) 6400MHz",
                            Price = 3800000m,
                            Sku = "RAM-GSK-Z532GB",
                            StockQuantity = 110
                        },
                        new
                        {
                            Id = 13L,
                            BrandId = 6L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2024, 2, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ổ cứng NVMe Gen4 nhanh nhất thị trường, lý tưởng cho hệ điều hành, game và ứng dụng nặng.",
                            ImagesJson = "[\"https://placehold.co/600x600/EFEFEF/333?text=990+Pro+2TB\"]",
                            Name = "Samsung 990 Pro NVMe M.2 SSD 2TB",
                            Price = 4500000m,
                            Sku = "SSD-SS-990P2TB",
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = 14L,
                            BrandId = 7L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2024, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tốc độ đọc ghi cực nhanh, lựa chọn hàng đầu của game thủ.",
                            ImagesJson = "[\"https://placehold.co/600x600/000/FFF?text=SN850X+2TB\"]",
                            Name = "WD Black SN850X NVMe M.2 SSD 2TB",
                            Price = 4200000m,
                            Sku = "SSD-WD-850X2TB",
                            StockQuantity = 85
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "CPU quá mạnh, chạy đa nhiệm và render video cực nhanh. Rất đáng tiền!",
                            CreatedAt = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 1L,
                            Rating = 5,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            Comment = "Hiệu năng chơi game đỉnh cao, không có gì để chê.",
                            CreatedAt = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 1L,
                            Rating = 5,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 3L,
                            Comment = "Đúng là trùm cuối card đồ họa. Chơi Cyberpunk 2077 max setting 4K mượt mà. Đắt nhưng xắt ra miếng.",
                            CreatedAt = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 5L,
                            Rating = 5,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Comment = "Hiệu năng chơi game 2K rất tốt trong tầm giá. Chỉ có điều card hơi nóng một chút.",
                            CreatedAt = new DateTime(2024, 4, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 8L,
                            Rating = 4,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            Comment = "RAM chạy ổn định, cắm vào là nhận ngay, không gặp vấn đề gì.",
                            CreatedAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = 9L,
                            Rating = 5,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = "$2a$11$9i.2nCqjA1DkC8B4lQ9C8uJ.Uj5GqXy.z/A7X2Q.Z9iB8qF.K/9W.",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "customer1@example.com",
                            FirstName = "An",
                            LastName = "Nguyễn",
                            PasswordHash = "$2a$11$gT/jKqC0Z.I7H.v2Uu4j6u8kK/gL7Xy.Z/Q5F/E9Z/A9qG.H/3e.",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "customer2@example.com",
                            FirstName = "Bình",
                            LastName = "Trần",
                            PasswordHash = "$2a$11$gT/jKqC0Z.I7H.v2Uu4j6u8kK/gL7Xy.Z/Q5F/E9Z/A9qG.H/3e.",
                            Role = "Customer"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.HasOne("Final.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Final.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.HasOne("Final.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Final.Domain.Entities.Review", b =>
                {
                    b.HasOne("Final.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Final.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Final.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
