// <auto-generated />
using System;
using Final.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Final.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250726103817_AddRecorvery")]
    partial class AddRecorvery
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Final.Domain.Entities.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "NVIDIA"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Corsair"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Kingston"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Western Digital"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "G.Skill"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Crucial"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Seasonic"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Cooler Master"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "MSI"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "ASUS"
                        },
                        new
                        {
                            Id = 14L,
                            Name = "Gigabyte"
                        },
                        new
                        {
                            Id = 15L,
                            Name = "LG"
                        },
                        new
                        {
                            Id = 16L,
                            Name = "Dell"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Vi xử lý (CPU)"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Card đồ họa (GPU)"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Bộ nhớ RAM"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Ổ cứng SSD"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Nguồn máy tính (PSU)"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Bo mạch chủ (Mainboard)"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Màn hình (Monitor)"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderDate = new DateTime(2025, 6, 11, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(597),
                            PhoneNumber = "0901234567",
                            ShippingAddress = "123 Đường ABC, Quận 1, TP.HCM",
                            Status = "Delivered",
                            TotalAmount = 15100000m,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            OrderDate = new DateTime(2025, 7, 1, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(600),
                            PhoneNumber = "0987654321",
                            ShippingAddress = "456 Đường XYZ, Quận Hoàn Kiếm, Hà Nội",
                            Status = "Processing",
                            TotalAmount = 53000000m,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 3L,
                            OrderDate = new DateTime(2025, 7, 16, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(602),
                            PhoneNumber = "0901234567",
                            ShippingAddress = "123 Đường ABC, Quận 1, TP.HCM",
                            Status = "Cancelled",
                            TotalAmount = 3200000m,
                            UserId = 4L
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Price = 9800000m,
                            ProductId = 2L,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 1L,
                            Price = 5300000m,
                            ProductId = 12L,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 2L,
                            Price = 28500000m,
                            ProductId = 5L,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 2L,
                            Price = 24500000m,
                            ProductId = 13L,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 3L,
                            Price = 3200000m,
                            ProductId = 7L,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "COD",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2L,
                            Code = "MOMO",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3L,
                            Code = "VNPAY",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4L,
                            Code = "BANK_TRANSFER",
                            IsActive = false
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("PaymentTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 15100000m,
                            OrderId = 1L,
                            PaymentMethod = "MOMO",
                            Status = "Success",
                            TransactionDate = new DateTime(2025, 6, 11, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(671),
                            TransactionId = "MOMO123456789"
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 53000000m,
                            OrderId = 2L,
                            PaymentMethod = "VNPAY",
                            Status = "Success",
                            TransactionDate = new DateTime(2025, 7, 1, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(675),
                            TransactionId = "VNPAY987654321"
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 3200000m,
                            OrderId = 3L,
                            PaymentMethod = "MOMO",
                            Status = "Failed",
                            TransactionDate = new DateTime(2025, 7, 16, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(701),
                            TransactionId = "MOMOFAILED001"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2025, 4, 17, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(424),
                            Description = "Vi xử lý đầu bảng cho gaming và sáng tạo nội dung.",
                            Name = "Intel Core i9-14900K",
                            Price = 15500000m,
                            Status = "Available",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 2L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2025, 4, 27, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(441),
                            Description = "Hiệu năng gaming thuần túy tốt nhất phân khúc nhờ 3D V-Cache.",
                            Name = "AMD Ryzen 7 7800X3D",
                            Price = 9800000m,
                            Status = "Available",
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = 3L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2025, 5, 7, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(443),
                            Description = "Vi xử lý tầm trung p/p tốt nhất cho gaming.",
                            Name = "Intel Core i5-14600K",
                            Price = 8500000m,
                            Status = "OutOfStock",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 4L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 3L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2025, 3, 28, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(444),
                            Description = "Sức mạnh tối thượng cho gaming 4K và các tác vụ AI.",
                            Name = "NVIDIA GeForce RTX 4090",
                            Price = 45000000m,
                            Status = "Available",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 5L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2025, 4, 7, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(446),
                            Description = "Card đồ họa đầu bảng của AMD, đối thủ cạnh tranh trực tiếp với RTX 4080.",
                            Name = "AMD Radeon RX 7900 XTX",
                            Price = 28500000m,
                            Status = "Available",
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = 6L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 14L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2025, 1, 7, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(448),
                            Description = "Card đồ họa quốc dân cho gaming Full HD.",
                            Name = "Gigabyte RTX 3060 Gaming OC",
                            Price = 8200000m,
                            Status = "Archived",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 7L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 4L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2025, 2, 26, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(450),
                            Description = "Kit RAM DDR5 hiệu năng cao, tản nhiệt nhôm.",
                            Name = "Corsair Vengeance DDR5 32GB 6000MHz",
                            Price = 3200000m,
                            Status = "Available",
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = 8L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 8L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2025, 3, 8, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(452),
                            Description = "Thiết kế đẹp mắt với LED RGB, tốc độ bus cao.",
                            Name = "G.Skill Trident Z5 RGB DDR5 32GB 6400MHz",
                            Price = 3800000m,
                            Status = "Available",
                            StockQuantity = 110
                        },
                        new
                        {
                            Id = 9L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 6L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2025, 1, 27, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(454),
                            Description = "Ổ cứng NVMe Gen4 nhanh nhất thị trường.",
                            Name = "Samsung 990 Pro NVMe M.2 SSD 2TB",
                            Price = 4500000m,
                            Status = "Available",
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = 10L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 7L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2025, 2, 6, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(456),
                            Description = "Tốc độ đọc ghi cực nhanh, lựa chọn hàng đầu của game thủ.",
                            Name = "WD Black SN850X NVMe M.2 SSD 1TB",
                            Price = 2600000m,
                            Status = "Available",
                            StockQuantity = 95
                        },
                        new
                        {
                            Id = 11L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 13L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2025, 5, 27, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(457),
                            Description = "Bo mạch chủ cao cấp cho CPU Intel thế hệ 14.",
                            Name = "ASUS ROG STRIX Z790-E GAMING WIFI II",
                            Price = 16000000m,
                            Status = "Available",
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 12L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 12L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2025, 6, 6, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(459),
                            Description = "Bo mạch chủ tầm trung tốt nhất cho nhu cầu gaming.",
                            Name = "MSI MAG B760M MORTAR WIFI DDR5",
                            Price = 5300000m,
                            Status = "Available",
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = 13L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 15L,
                            CategoryId = 7L,
                            CreatedAt = new DateTime(2025, 6, 16, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(461),
                            Description = "Màn hình OLED 2K 240Hz cho trải nghiệm gaming đỉnh cao.",
                            Name = "LG UltraGear 27GR95QE-B 240Hz OLED",
                            Price = 24500000m,
                            Status = "Available",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 14L,
                            AddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 16L,
                            CategoryId = 7L,
                            CreatedAt = new DateTime(2025, 6, 26, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(463),
                            Description = "Màn hình 4K chuyên đồ họa với tấm nền IPS Black.",
                            Name = "Dell UltraSharp U2723QE 4K IPS",
                            Price = 13800000m,
                            Status = "Available",
                            StockQuantity = 60
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.ProductImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ImageUrl = "https://placehold.co/600x600/EFEFEF/333?text=i9-14900K-1",
                            ProductId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ImageUrl = "https://placehold.co/600x600/EFEFEF/333?text=i9-14900K-2",
                            ProductId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            ImageUrl = "https://placehold.co/600x600/EFEFEF/333?text=7800X3D",
                            ProductId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            ImageUrl = "https://placehold.co/600x600/1B3C34/FFF?text=RTX+4090",
                            ProductId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            ImageUrl = "https://placehold.co/600x600/E83131/FFF?text=RX+7900XTX",
                            ProductId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            ImageUrl = "https://placehold.co/600x600/111/EEE?text=Corsair+RAM",
                            ProductId = 7L
                        },
                        new
                        {
                            Id = 7L,
                            ImageUrl = "https://placehold.co/600x600/0078D4/FFF?text=Samsung+SSD",
                            ProductId = 9L
                        },
                        new
                        {
                            Id = 8L,
                            ImageUrl = "https://placehold.co/600x600/D82727/FFF?text=ASUS+ROG",
                            ProductId = 11L
                        },
                        new
                        {
                            Id = 9L,
                            ImageUrl = "https://placehold.co/600x600/333/FFF?text=LG+OLED",
                            ProductId = 13L
                        },
                        new
                        {
                            Id = 10L,
                            ImageUrl = "https://placehold.co/600x600/333/FFF?text=LG+OLED-2",
                            ProductId = 13L
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "CPU gaming tốt nhất hiện tại, không có gì để chê!",
                            CreatedAt = new DateTime(2025, 5, 7, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(527),
                            ProductId = 2L,
                            Rating = 5,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            Comment = "Đắt nhưng xắt ra miếng. Cân mọi game 4K max setting.",
                            CreatedAt = new DateTime(2025, 5, 17, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(529),
                            ProductId = 4L,
                            Rating = 5,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 3L,
                            Comment = "Tốc độ rất nhanh, nhưng giá hơi cao so với các hãng khác.",
                            CreatedAt = new DateTime(2025, 5, 27, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(530),
                            ProductId = 10L,
                            Rating = 4,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 4L,
                            Comment = "Mainboard p/p quá tốt, đầy đủ cổng kết nối.",
                            CreatedAt = new DateTime(2025, 6, 16, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(532),
                            ProductId = 12L,
                            Rating = 5,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Comment = "Màu sắc và tần số quét của màn hình này thật sự tuyệt vời.",
                            CreatedAt = new DateTime(2025, 7, 6, 10, 38, 17, 99, DateTimeKind.Utc).AddTicks(533),
                            ProductId = 13L,
                            Rating = 5,
                            UserId = 7L
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 2L,
                            UserId = 6L
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.ShoppingCartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("ShoppingCartId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ProductId = 8L,
                            Quantity = 1,
                            ShoppingCartId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ProductId = 10L,
                            Quantity = 1,
                            ShoppingCartId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            ProductId = 14L,
                            Quantity = 2,
                            ShoppingCartId = 2L
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsRecoveryEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecoveryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecurityAnswerHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "owner@final.com",
                            FirstName = "Văn",
                            IsRecoveryEmailVerified = false,
                            LastName = "Toàn",
                            PasswordHash = "$2a$11$N1brDk6.a9UHivirpPppuuV30cywfm.PCZIOdKoe6RPb1zfVdjlM2",
                            Role = "Owner",
                            Status = 0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@final.com",
                            FirstName = "Quốc",
                            IsRecoveryEmailVerified = false,
                            LastName = "Tuấn",
                            PasswordHash = "$2a$11$N1brDk6.a9UHivirpPppuuV30cywfm.PCZIOdKoe6RPb1zfVdjlM2",
                            Role = "Admin",
                            Status = 0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin2@final.com",
                            FirstName = "Thanh",
                            IsRecoveryEmailVerified = false,
                            LastName = "Bình",
                            PasswordHash = "$2a$11$N1brDk6.a9UHivirpPppuuV30cywfm.PCZIOdKoe6RPb1zfVdjlM2",
                            Role = "Admin",
                            Status = 1
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "minhan@customer.com",
                            FirstName = "Minh",
                            IsRecoveryEmailVerified = false,
                            LastName = "An",
                            PasswordHash = "$2a$11$N1brDk6.a9UHivirpPppuuV30cywfm.PCZIOdKoe6RPb1zfVdjlM2",
                            Role = "Customer",
                            Status = 0
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "baochau@customer.com",
                            FirstName = "Bảo",
                            IsRecoveryEmailVerified = false,
                            LastName = "Châu",
                            PasswordHash = "$2a$11$N1brDk6.a9UHivirpPppuuV30cywfm.PCZIOdKoe6RPb1zfVdjlM2",
                            Role = "Customer",
                            Status = 0
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "giahan@customer.com",
                            FirstName = "Gia",
                            IsRecoveryEmailVerified = false,
                            LastName = "Hân",
                            PasswordHash = "$2a$11$N1brDk6.a9UHivirpPppuuV30cywfm.PCZIOdKoe6RPb1zfVdjlM2",
                            Role = "Customer",
                            Status = 0
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "dangkhoa@customer.com",
                            FirstName = "Đăng",
                            IsRecoveryEmailVerified = false,
                            LastName = "Khoa",
                            PasswordHash = "$2a$11$N1brDk6.a9UHivirpPppuuV30cywfm.PCZIOdKoe6RPb1zfVdjlM2",
                            Role = "Customer",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.HasOne("Final.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Final.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Final.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("Final.Domain.Entities.Order", "Order")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.HasOne("Final.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Final.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("Final.Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Final.Domain.Entities.Review", b =>
                {
                    b.HasOne("Final.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("Final.Domain.Entities.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Final.Domain.Entities.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final.Domain.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("Final.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Final.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Final.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Final.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Final.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
