// <auto-generated />
using System;
using Final.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Final.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250622153353_UpdateSchemaAndSeedData")]
    partial class UpdateSchemaAndSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Final.Domain.Entities.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "NVIDIA"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Corsair"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Kingston"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Western Digital"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "G.Skill"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Crucial"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Seasonic"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Cooler Master"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "MSI"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "CPU (Vi xử lý)",
                            Slug = "cpu"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "GPU (Card đồ họa)",
                            Slug = "gpu"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "RAM (Bộ nhớ trong)",
                            Slug = "ram"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "SSD (Ổ cứng thể rắn)",
                            Slug = "ssd"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "PSU (Nguồn máy tính)",
                            Slug = "psu"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Final.Domain.Entities.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Intel Core i9-14900K",
                            Price = 15500000m,
                            Sku = "CPU-INT-14900K",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 2L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Intel Core i7-14700K",
                            Price = 11200000m,
                            Sku = "CPU-INT-14700K",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 3L,
                            BrandId = 2L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AMD Ryzen 9 7950X3D",
                            Price = 14800000m,
                            Sku = "CPU-AMD-7950X3D",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 4L,
                            BrandId = 2L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AMD Ryzen 7 7800X3D",
                            Price = 9800000m,
                            Sku = "CPU-AMD-7800X3D",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 5L,
                            BrandId = 3L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NVIDIA GeForce RTX 4090",
                            Price = 45000000m,
                            Sku = "GPU-NV-4090",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 6L,
                            BrandId = 3L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NVIDIA GeForce RTX 4080 Super",
                            Price = 31000000m,
                            Sku = "GPU-NV-4080S",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 7L,
                            BrandId = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AMD Radeon RX 7900 XTX",
                            Price = 28500000m,
                            Sku = "GPU-AMD-7900XTX",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 8L,
                            BrandId = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AMD Radeon RX 7800 XT",
                            Price = 15000000m,
                            Sku = "GPU-AMD-7800XT",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 9L,
                            BrandId = 4L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Corsair Vengeance DDR5 32GB (2x16GB) 6000MHz",
                            Price = 3200000m,
                            Sku = "RAM-COR-V32GB",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 10L,
                            BrandId = 8L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "G.Skill Trident Z5 RGB DDR5 32GB (2x16GB) 6400MHz",
                            Price = 3800000m,
                            Sku = "RAM-GSK-Z532GB",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 11L,
                            BrandId = 5L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kingston Fury Beast DDR5 16GB 5200MHz",
                            Price = 1500000m,
                            Sku = "RAM-KIN-F16GB",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 12L,
                            BrandId = 9L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Crucial Pro DDR5 16GB 5600MHz",
                            Price = 1450000m,
                            Sku = "RAM-CRU-P16GB",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 13L,
                            BrandId = 6L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung 990 Pro NVMe M.2 SSD 2TB",
                            Price = 4500000m,
                            Sku = "SSD-SS-990P2TB",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 14L,
                            BrandId = 7L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WD Black SN850X NVMe M.2 SSD 2TB",
                            Price = 4200000m,
                            Sku = "SSD-WD-850X2TB",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 15L,
                            BrandId = 9L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Crucial P5 Plus NVMe M.2 SSD 1TB",
                            Price = 2100000m,
                            Sku = "SSD-CRU-P5P1TB",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 16L,
                            BrandId = 5L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kingston KC3000 NVMe M.2 SSD 1TB",
                            Price = 2300000m,
                            Sku = "SSD-KIN-KC3K1TB",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 17L,
                            BrandId = 4L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Corsair RM1000e 1000W 80+ Gold",
                            Price = 4100000m,
                            Sku = "PSU-COR-RM1000E",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 18L,
                            BrandId = 10L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Seasonic FOCUS Plus Gold 850W",
                            Price = 3400000m,
                            Sku = "PSU-SEA-FP850W",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 19L,
                            BrandId = 11L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cooler Master MWE Gold 750 V2",
                            Price = 2500000m,
                            Sku = "PSU-CM-MWE750",
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 20L,
                            BrandId = 12L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MSI MPG A850G PCIE5 850W",
                            Price = 3600000m,
                            Sku = "PSU-MSI-A850G",
                            StockQuantity = 0
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Final.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = "123",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@example.com",
                            FirstName = "Test",
                            LastName = "Customer",
                            PasswordHash = "123",
                            Role = "Customer"
                        });
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.HasOne("Final.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Final.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.HasOne("Final.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Final.Domain.Entities.Review", b =>
                {
                    b.HasOne("Final.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Final.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Final.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Final.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Final.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
